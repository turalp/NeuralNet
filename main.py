import imp
import tensorflow as tf
import tensorflow_gnn as tfgnn

from keras import layers
from keras import initializers
from enums.NodeType import NodeType
from static.static_values import node_types

from helpers.neural_net_deserializer import NeuralNetDeserializer

print("Started a program to activate GNN generated by SharpNEAT\n")
print("Type path to XML file which represents GNN:")

path_to_file = input()

xml_to_deserialize = open(path_to_file, 'r', encoding='utf-8')
xml_text = xml_to_deserialize.read()

deserializer = NeuralNetDeserializer(xml_text)
neural_net = deserializer.deserialize()

# TODO: what is need here call builder to transform custom neural net class into
# the terms of TensorFlow. Build the model and then think about task to solve

# model = layers.Layer(trainable=False,name="Example",dtype="bias",dynamic=False)
# model.Add()

# for network in neural_net.networks:
#     inputs = list()
#     input_nodes = filter(lambda x: x.type == node_types[NodeType.IN], network.nodes)
    
#     model = layers.Input(shape=(None,))
#     inputs.append(model)
#     for input_node in input_nodes[0:]:
#         input = layers.Input(shape=(None,))
#         model.add(input)
#         inputs.append(input)
    
#     hids = list()
#     hid_nodes = filter(lambda x: x.type == node_types[NodeType.HID], network.nodes)
#     for hid_node in hid_nodes:
#         model = 

print("GNN was activated by Tensorflow successfully.")