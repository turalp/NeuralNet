# TODO: To transform neural net, generated by SharpNEAT
# It's necessary to: 
# 1. Create keras layers in all inputs by Functional API
# 2. Generate weights array by indexes of layer and ith and jth neuron
# 3. Create class to build inputs, weights array and outputs

# Links to help:
# https://stackoverflow.com/questions/58295955/keras-how-to-view-node-connections
# https://keras.io/guides/functional_api/
# https://keras.io/api/models/
# https://towardsdatascience.com/building-your-first-neural-network-in-tensorflow-2-tensorflow-for-hackers-part-i-e1e2f1dfe7a0

from __future__ import annotations
from turtle import shape
import tensorflow as tf

from tensorflow import keras
from keras import layers

from enums.NodeType import NodeType
from models.graph_node import GraphNode
from models.neural_net import NeuralNetNetwork
from static.static_values import node_types

class NeuralNetBuilder:
    layers: layers.Layer

    def __init__(self) -> None:
        pass

    def get_bias(self, neural_net: NeuralNetNetwork) -> GraphNode:
        bias = filter(lambda x: x.type == node_types[NodeType.BIAS], neural_net)
        return bias

    def with_inputs(self, neural_net: NeuralNetNetwork) -> list:
        neural_net.sort_nodes()
        input_nodes = filter(lambda x: x.type == node_types[NodeType.IN], neural_net)
        inputs_to_return = list()
        for input_node in input_nodes:
            input = keras.Input(shape=(None,))
            inputs_to_return.append(input)
        
        return inputs_to_return
    
    def with_hid(self, neural_net: NeuralNetNetwork):
        pass
    

            
