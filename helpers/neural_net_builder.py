# TODO: To transform neural net, generated by SharpNEAT
# It's necessary to: 
# 1. Create keras layers in all inputs by Functional API
# 2. Generate weights array by indexes of layer and ith and jth neuron
# 3. Create class to build inputs, weights array and outputs

# Links to help:
# https://stackoverflow.com/questions/58295955/keras-how-to-view-node-connections
# https://keras.io/guides/functional_api/
# https://keras.io/api/models/
# https://towardsdatascience.com/building-your-first-neural-network-in-tensorflow-2-tensorflow-for-hackers-part-i-e1e2f1dfe7a0

from __future__ import annotations

from enums.NodeType import NodeType
from models.activation_function import ActivationFunction
from models.graph_connection import GraphConnection
from models.graph_node import GraphNode
from models.neural_net import NeuralNet

class NeuralNetBuilder:
    neural_net: NeuralNet
    inputs: list[int]
    outputs: list[int]

    def __init__(self, inputs: list[int], outputs: list[int]) -> None:
        self.neural_net = NeuralNet()
        self.inputs = inputs
        self.outputs = outputs

    def with_activation_function(self, activation_function: ActivationFunction) -> NeuralNetBuilder:
        self.neural_net.activation_function = activation_function
        return self
    
    def with_connections(self, connections: list[GraphConnection]) -> NeuralNetBuilder:
        self.neural_net.connections = connections
        return self
    
    def with_nodes(self, connections: list[GraphConnection]) -> NeuralNetBuilder:
        for connection in connections:
            if all(node.id != connection.source for node in self.neural_net.graph_nodes):
                self.__add_node(connection.source)
            
            if all(node.id != connection.target for node in self.neural_net.graph_nodes):
                self.__add_node(connection.target)

        return self

    def return_neural_net(self):
        return self.neural_net
    
    def __add_node(self, id: int) -> None:
        connections = filter(lambda node: node.target == id, self.neural_net.connections)
        inputs = [node.source for node in connections]
        node = GraphNode(id, self.__get_type_of_node(id), inputs)
        self.neural_net.graph_nodes.append(node)
    
    def __get_type_of_node(self, id: int) -> NodeType:
        if id in self.inputs:
            return NodeType.IN
        elif id in self.outputs:
            return NodeType.OUT
        else:
            return NodeType.HID

            
